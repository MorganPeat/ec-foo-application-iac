name: 'Terraform Plan'
description: 'Run a terraform plan against some IaC'
inputs:
  deployment-environment:
    description: 'Environment being deployed to'
    required: true
    default: 'dev'
  github-token:
    description: 'GitHub token for writing back to repo'
    required: true

runs:
  using: 'composite'
  steps:

    - name: Get Reader Secret
      id: reader-tfe-token
      uses: hashicorp/vault-action@v2.4.0
      with:
        url: http://34.76.97.0:8200
        method: jwt
        role: foo-${{ inputs.deployment-environment }}-reader
        jwtGithubAudience: https://github.com/morganpeat
        secrets: |
            terraform/creds/foo-${{ inputs.deployment-environment }}-resources-reader token | TFE_TOKEN

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.1.1
        cli_config_credentials_token: ${{ steps.reader-tfe-token.outputs.TFE_TOKEN }}

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check -recursive
      shell: bash

    - name: Terraform Init
      id: init
      run: terraform init
      shell: bash
      working-directory: ./environments/${{ inputs.deployment-environment }}
    
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      shell: bash
      working-directory: ./environments/${{ inputs.deployment-environment }}

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color
      shell: bash
      working-directory: ./environments/${{ inputs.deployment-environment }}
      continue-on-error: true

    - uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
      shell: bash
